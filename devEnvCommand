#apache2, PHP, mysql
sudo apt-get install apache2 -y
sudo apache2ctl configtest
sudo ufw app list
sudo ufw app info "Apache Full"
sudo ufw allow in "Apache Full"
sudo apt-get install mysql-server -y
sudo mysql_secure_installation
sudo mysql -u root -p
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';
FLUSH PRIVILEGES;
SELECT user,authentication_string,plugin,host FROM mysql.user;
quit
sudo add-apt-repository ppa:ondrej/php
sudo apt install php7.1 libapache2-mod-php7.1 php7.1-common php7.1-mbstring php7.1-xmlrpc php7.1-soap php7.1-gd php7.1-xml php7.1-intl php7.1-mysql php7.1-cli php7.1-mcrypt php7.1-zip php7.1-curl

#find php.ini
sudo find / -name php.ini
sudo php -i | grep 'Configuration File'

#modifying the PHP configuration
create info.php that contain a phpinfo() function, save it, and check with yourip/info.php
commonly the configuration file is located at /etc/php/7.1/apache2/php.ini
edit this line
post_max_size
upload_max_filesize
memory_limit
max_execution_time
then run sudo service apache2 restart

#change tab width and set number vim
touch .vimrc #u need installed the latest vim
:set nu
:set tabstop=4
:set shiftwidth=4
:set expandtab

#phpmyadmin
sudo apt-get install phpmyadmin php-gettext -y
select apache2 with pressing spacebar
select yes when prompt ask for configure database for phpmyadmin with dbconfig-common
sudo phpenmod mcrypt
sudo phpenmod mbstring
sudo ln -s /usr/share/phpmyadmin/ /var/www/html/phpmyadmin
sudo systemctl restart apache2

#apache on centos
sudo yum install httpd
sudo service httpd start

#postgres on centos
sudo yum install postgresql-server postgresql-contrib
sudo postgresql-setup initdb
sudo systemctl start postgresql
sudo systemctl enable postgresql
sudo vi /var/lib/pgsql/data/pg_hba.conf


#composer
curl -sS https://getcomposer.org/installer -o composer-setup.php
sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer

#node version manager
sudo apt-get install build-essential libssl-dev -y
curl https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash
source ~/.bashrc
nvm install --lts #for latest version of nodejs

#ruby environment ubuntu
sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev libffi-dev -y
git clone https://github.com/rbenv/rbenv.git ~/.rbenv
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
echo 'eval "$(rbenv init -)"' >> ~/.bashrc
exec $SHELL
git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc
exec $SHELL
rbenv install 2.4.0
rbenv global 2.4.0
ruby -v
gem install bundler
gem install rails

#ruby environment centOS
sudo yum install -y git-core zlib zlib-devel gcc-c++ patch readline readline-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison curl sqlite-devel
git clone git://github.com/sstephenson/rbenv.git .rbenv
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
echo 'eval "$(rbenv init -)"' >> ~/.bashrc
exec $SHELL
git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc
exec $SHELL
rbenv install 2.4.0
rbenv global 2.4.0
ruby -v
gem install bundler
gem install rails


#tmux, tmuxinator, and htop
sudo apt-get install tmux htop -y
echo $EDITOR
export EDITOR='vim'
gem install tmuxinator

#SDL (Simple Direct Library)
sudo apt-cache search libsdl2
sudo apt-get install libsdl2-dev

#cocos2dx
sudo apt-get install -y python2.7
##for ubuntu 16.04
sudo apt-get install -y g++ libgdk-pixbuf2.0-dev python-pip cmake libx11-dev libxmu-dev libglu1-mesa-dev libgl2ps-dev libxi-dev libzip-dev libpng-dev libcurl4-gnutls-dev libfontconfig1-dev libsqlite3-dev libglew-dev libssl-dev libgtk-3-dev libglfw3 libglfw3-dev xorg-dev gcc-4.9 g++-4.9
##for ubuntu 18.04
sudo apt-get install -y g++ libgdk-pixbuf2.0-dev python-pip cmake libx11-dev libxmu-dev libglu1-mesa-dev libgl2ps-dev libxi-dev libzip-dev libpng-dev libcurl4-gnutls-dev libfontconfig1-dev libsqlite3-dev libglew-dev libssl-dev libgtk-3-dev libglfw3 libglfw3-dev xorg-dev 
git clone https://github.com/cocos2d/cocos2d-x.git
cd cocos2d-x-root
git submodule update --init
git submodule update
./download-deps.py
cd cocos2d-x-root
cd build
./install-deps-linux.sh
mkdir linux-build
cd linux-build
cmake ../..
make -j 4

#android studio
sudo mv ~/android-studio /usr/local/
cd /usr/local/android-studio/bin
./studio.sh

#installing lua
sudo apt-get install -y lua5.2

#sublime text
wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list
sudo apt-get update
sudo apt-get install sublime-text

#java environment
sudo apt-get install -y default-jre
sudo apt-get install -y default-jdk
sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java8-installer
sudo update-alternatives --config java
sudo nano /etc/environment
JAVA_HOME="/usr/lib/jvm/java-8-oracle"
source /etc/environment
echo $JAVA_HOME

#install wordpress
cd /tmp
curl -O https://wordpress.org/latest.tar.gz
tar xzvf latest.tar.gz
sudo apt-get install php-curl php-gd php-mbstring php-mcrypt php-xml php-xmlrpc
sudo systemctl restart apache2
sudo vi /etc/apache2/apache2.conf
edit <Directory /var/www/html/> AllowOverride All
sudo a2enmod rewrite
sudo apache2ctl configtest
sudo systemctl restart apache2
touch /tmp/wordpress/.htaccess
chmod 660 /tmp/wordpress/.htaccess
cp /tmp/wordpress/wp-config-sample.php /tmp/wordpress/wp-config.php
mkdir /tmp/wordpress/wp-content/upgrade
sudo cp -a /tmp/wordpress/. /var/www/html
sudo chown -R $USER:www-data /var/www/html
sudo find /var/www/html -type d -exec chmod g+s {} \;
sudo chmod g+w /var/www/html/wp-content
sudo chmod -R g+w /var/www/html/wp-content/themes
sudo chmod -R g+w /var/www/html/wp-content/plugins
curl -s https://api.wordpress.org/secret-key/1.1/salt/
nano /var/www/html/wp-config.php
change this line:
define('AUTH_KEY',         'VALUES COPIED FROM THE COMMAND LINE');
define('SECURE_AUTH_KEY',  'VALUES COPIED FROM THE COMMAND LINE');
define('LOGGED_IN_KEY',    'VALUES COPIED FROM THE COMMAND LINE');
define('NONCE_KEY',        'VALUES COPIED FROM THE COMMAND LINE');
define('AUTH_SALT',        'VALUES COPIED FROM THE COMMAND LINE');
define('SECURE_AUTH_SALT', 'VALUES COPIED FROM THE COMMAND LINE');
define('LOGGED_IN_SALT',   'VALUES COPIED FROM THE COMMAND LINE');
define('NONCE_SALT',       'VALUES COPIED FROM THE COMMAND LINE');

define('DB_NAME', 'wordpress');

/** MySQL database username */
define('DB_USER', 'wordpressuser');

/** MySQL database password */
define('DB_PASSWORD', 'password');
yc#Fo6uH#pB72u@kjF

#install golang
curl -O https://storage.googleapis.com/golang/go1.6.linux-amd64.tar.gz
tar xvf go1.6.linux-amd64.tar.gz
sudo chown -R root:root ./go
sudo mv go /usr/local
sudo nano ~/.profile
sudo apt-get install golang-go -y

#how to use javatar
install javatar
ctrl+shift+kk --> Create > Package
type javatar.simple.demo (you can type the structure directory whatever you want)
set source folder by Project Settings > set source folder and select src directory
ctrl+shift+kk --> Create > Class
type javatar.simple.demo.Main
coding
select Build > Project From
select Build > Run Main Class

ssh root@66.42.53.182
ssh root@66.42.54.174
dvosaf9sdf9

#create maven project
mvn archetype:generate \
-DgroupId=com.doyoque.basic \
-DartifactId=basic \
-DarchetypeArtifactId=maven-archetype-quickstart \
-DinteractiveMode=false
mvn package #compile maven
java -cp target/basic-1.0-SNAPSHOT.jar com.doyoque.basic.App #execute program

#install redis
sudo apt-get install redis-server
sudo vi /etc/redis/redis.conf
take a look at supervised string. By default is "no". Change it with systemd
sudo systemctl restart redis.service
sudo systemctl status redis
